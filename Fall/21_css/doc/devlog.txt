DEVLOG for Team Fine Pizza

benjaminA -- 2019-10-18 09:25
Creation of necessary files - README, devlog, database(empty), utl directory

williamL -- 2019-10-20 21:20
Creation of design file

williamL -- 2019-10-20 05:28
Updated the design file include the component diagram that illustrates how the
front-end aspects of the code with interact with the back-end to create a
working site. Also tables of the databases to show what each table should store
in each column. The site map was slightly improved to be more accurate. Wording
in some areas were changed to be more technically correct. Added a way for users
to only be able to contribute to a story once. Major web pages, functions, and
variables were also laid out to give a general guideline of what should be
implemented.

tylerH -- 2019-10-21 09:11
Created app.py, base.html, homepage.html, landingpage.html. For app.py I added
routes for root, home, logout, login, and register. Also, created the methods
for each of the routes. I made the design for the html files.

williamL -- 2019-10-21 09:25
SQLite Methods

Join- there are multiple methods to query data from two or more tables,
      which include "inner join", "left join", and "cross join". This would
      be useful in figuring out a user's total contributions by retrieving
      all the edits they made from each story's tables

Inner Join - selects certain rows from two or more tables and prints a table of
              values given that the conditional is true
  Syntax:   SELECT a1, a2, b1, b2         // column name(s)
            FROM A                        // table(s) to read from
            INNER JOIN B ON B.f = A.f;    // if column f in B equals column f in
                                          // A, return in a table

Left Join - used on tables with related columns (same name)
            all rows are included but the ones that do not match the
            conditional are replaced will NULL
  Syntax:   SELECT a, b                 // column name(s)
            FROM A                      // table(s) to read from
            LEFT JOIN B ON A.f = B.f    // if column f in A equals column f in B; also works for > and <
            WHERE search_condition;     //

Cross Join - given table A with k rows and table B with n rows, a set is
              produced with k x n rows. (Similar to foiling in algebra).

  Syntax: SELECT *
          FROM A
          CROSS JOIN B;

benjaminA -- 2019-10-21 16:50
Programming Sucks

In the real world, most programs are broken most of the time, due to various factors, but especially the lack of coordination.
What can we do about this?
1. Communicate
2. Put meaningful comments in our code
3. Don't spend hours trying to make things perfect when they already work well because it will never be perfect

(If you thought that was a multiple choice question, the answer is 4. All of the above)

benjaminA -- 2019-10-22 09:25
Created a function to facilitate inserting rows into a table
Usage:
  insert(<table_name>, <params>)
It can handle 2, 3, or 4 parameters, based on the number of columns in the given table

benjaminA -- 2019-10-22 18:40
Added new table and adjusted parameters of other tables, as shown on design doc.

Created a function to update a table when someone adds something new to a story
Usage:
  update(<user_id>, story_id>, <added text>)

benjaminA -- 2019-10-23 09:25
Made update command also change the edits table

Created a function to tell whether a person has edited a particular story
Usage:
  has_edited(<user_id>, <story_id>)
It will return true if the user has edited that story before, and false if not

tylerH -- 2019-10-23 08:11
continued working on app.py
  worked on register route, adding a function to add the credentials to the users table
  after register, the user is added into the session
  added error flashing under register to make sure none of the fields are blank
  added the error flashing to the landing page html file
  edited the home page html to include a welcome message
removed data.db file

benjaminA -- 2019-10-23 21:30
Made insert take any number of parameters
Encountered a problem when trying to call ops from app.py - to be fixed later

tylerH -- 2019-10-23 21:51
continued working on app.py
  worked on login route, adding a function to check login input to credentials in users table
  added error flashing under login to make sure none of the fields are blank
  added try and except error handling to handle invalid password or username inputs

williamL -- 2019-10-24 00:50
Fixed the error in the code for register(). The register function now adds the
inputs into a table, and logs the user into a session.

tylerH -- 2019-10-24 09:17
continued working on app.py
  made a function to get the length of tables
  used this function to increment user_id

tylerH -- 2019-10-24 11:26
continued working on app.py
  debugged the login and register functions
  register now correctly checks if a username is already taken
  login also compares the credentials properly

williamL -- 2019-10-24 16:52
made the method for printing the list of stories on the home page
  and implemented that into html using jinja

williamL -- 2019-10-24 18:06
updated the README file to provide instructions on how to run our project

benjaminA -- 2019-10-24 19:00
Allowed the user to create a new story
Showed the names of all stories (whether edited by user or not) in homepage
Fixed naming on devlog

tylerH -- 2019-10-24 21:57
edited app.py, homepage.html, and newpage.html
  cleaned up the function to add stories
  updated newpage.html with error flashing
  on home page now lists the stories, and looks more readable

tylerH -- 2019-10-25 08:41
edited app.py, newpage.html
  fixed the cancel button on newpage.html
  fixed the create story function to add the correct story_id to edits table

benjaminA -- 2019-10-25 09:25
Deleted ops.py, implemented functions inside app.py instead of calling ops

benjaminA -- 2019-10-25 17:10
Added links from each story title on the homepage to their separate page
On each story's page, the full text is displayed, and there is an option to return home

tylerH -- 2019-10-25 19:20
worked on app.py and homepage.html
  added some comments on app.py
  added a section for users to edit stories in homepage.html
  added a function to get user id
  updated the getStories function to only show stories that have been edited
  added a function to show the stories that a user can add to
  added a function to allow users to add to a story
  updated the getCanAddToStories to show the correct stories that can be edited
  added a new global to keep track of the current story_id the user is editing
  deleted has_edited function
  created addToStory function to update the last_edit in tables and add the user to the edits tables
  added error flashing to homepage.html
  updated addToStory to update the story in the stories table
created add.html
  this file loads the last edit of the story and allows for user to add to a story
  this file also has a button to return to home page
  added button to submit the additions

tylerH -- 2019-10-25 22:19
worked on app.py and landingpage.html
  added a flash message for logout

williamL -- 2019-10-26 15:17
created reset.py
  this file resets holding.db by deleting the tables and creating new ones
  run this before testing the project

williamL -- 2019-10-26 15:45
updated the site map in design.pdf to match the current state of our project

benjaminA -- 2019-10-27 22:20
Added comments to app.py to make code more readable

williamL -- 2019-10-28 4:37
Updated the README file to match our current design
